import asyncio

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InputMediaVideo

import configs
import keyboards
from states import States
from main import bot

router = Router()
timer_active = False
remaining_time = 86400  # 3 –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


@router.message(Command('start'))
async def command_start(message: Message, state: FSMContext):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç üëã"
        f"\n\n–Ø —á–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞ <b>–ê–§–ò–®–ê‚Ä¢–ê–î–õ–ï–†üí¨</b>.\n–ê —Ç–∞–∫ –∂–µ —è –ø–æ–º–æ–≥–∞—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é –∞—Ñ–∏—à—É –≤ –∫–∞–Ω–∞–ª–µ."
        f"\n\n–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?üëá",
        reply_markup=keyboards.create_reply_keyboard(), parse_mode='HTML')


@router.message(Command('about'))
async def command_start(message: Message, state: FSMContext):
    await message.answer(f"–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - @dinozavrik_22")


@router.message(lambda message: message.text == "‚úÖ –ê—Ñ–∏—à–∞ –≤ –ê–¥–ª–µ—Ä–µ")
async def handle_text(message: Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        f"–ê—Ñ–∏—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –ê–¥–ª–µ—Ä–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —á–∞—Ç-–±–æ—Ç–æ–º ü§ñ c–ª–µ–¥—É—è –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."
        f"\n\n–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –∞—Ñ–∏—à–µ <u>–±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ</u>. –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è 1Ô∏è‚É£ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ 3Ô∏è‚É£ –¥–Ω—è. "
        f"\n\n–†–∞–∑–º–µ—â–µ–Ω–∏–µ - –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ. –ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞–∑–º–µ—â–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –º–∏–Ω–∏–º—É–º –∑–∞ 3-5 –¥–Ω–µ–π –¥–æ –µ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è."
        f"\n\n–ù–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º - –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å\"</b>."
        f"\n\n–ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞ –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/start</b> —á—Ç–æ–± –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.",
        parse_mode="HTML")
    data = await state.get_data()
    try:
        data['name'] or data['date'] or data['description'] or data['adress'] or data['price'] or data['not'] or data[
        'photo'] or data['contacts'] or data['message_id']
    except:
        await state.update_data(date=None)
        await state.update_data(description=None)
        await state.update_data(adress=None)
        await state.update_data(price=None)
        await state.update_data(name=None)
        await state.update_data(note=None)
        await state.update_data(photo=None)
        await state.update_data(contacts=None)
        await state.update_data(message_id=None)
    data = await state.get_data()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                         reply_markup=keyboards.create_new_keyboard(data=data))



@router.message(lambda message: message.text == "üëâ –ü—Ä–∞–≤–∏–ª–∞ –∫–∞–Ω–∞–ª–∞")
async def handle_text(message: Message, state: FSMContext):
    await message.answer(
        f"‚ùóÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –ö–∞–Ω–∞–ª–∞:"
        f"\n\n1. –í –∫–∞–Ω–∞–ª–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è <b>–ë–ï–°–ü–õ–ê–¢–ù–û</b> –ª—é–±–∞—è –∞—Ñ–∏—à–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –≥–æ—Ä–æ–¥–µ <b>–ê–î–õ–ï–†</b>. –û–Ω–ª–∞–π–Ω –∞—Ñ–∏—à–∞ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥—Ä—É–≥–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ (–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞, –°–æ—á–∏ –∏ –¥—Ä.) –ø—É–±–ª–∏–∫—É—é—Ç –∞—Ñ–∏—à—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø–ª–∞—Ç–Ω–æ. –£—Å–ª–æ–≤–∏—è –æ–ø–∏—Å–∞–Ω—ã –Ω–∏–∂–µ."
        f"\n\n2. –ê—Ñ–∏—à–∞ –≤ –ê–¥–ª–µ—Ä–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —á–∞—Ç-–±–æ—Ç–æ–º. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <u>‚úÖ –ê—Ñ–∏—à–∞ –≤ –ê–¥–ª–µ—Ä–µ</u> –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —á–∞—Ç –±–æ—Ç–∞. –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ <b>–ê–§–ò–®–ê‚Ä¢–ê–î–õ–ï–†</b>üí¨"
        f"\n\n3. –ê—Ñ–∏—à–∞ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è 1Ô∏è‚É£ —Ä–∞–∑ –≤ 3Ô∏è‚É£ –¥–Ω—è."
        f"\n\n4. –ü–ª–∞—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <u>‚ùå–ê—Ñ–∏—à–∞ –ù–ï –≤ –ê–¥–ª–µ—Ä–µ</u> –∏ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º <b>@adlerafisha_admin</b> –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—é –∞—Ñ–∏—à—É. –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –∫–∞–Ω–∞–ª."
        f"\n\n5. –£—Å–ª–æ–≤–∏—è –ø–ª–∞—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã:"
        f"\n‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ 300—Ä."
        f"\n‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ + –∑–∞–∫—Ä–µ–ø 500—Ä."
        f"\n‚úÖ –†–µ–∫–ª–∞–º–∞ –æ–¥–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Ç—Ä–∏ –¥–Ω—è."
        f"\n‚úÖ –í—ã –º–æ–∂–µ—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞—Ñ–∏—à—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±–µ–∑ —à–∞–±–ª–æ–Ω–∞ –∫–∞–Ω–∞–ª–∞."
        f"\n‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∫ –≤–∞—à–µ–π –∞—Ñ–∏—à–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.",
        parse_mode="HTML", reply_markup=keyboards.back_btn2)


@router.message(lambda message: message.text == "‚ùå –ê—Ñ–∏—à–∞ –Ω–µ –≤ –ê–¥–ª–µ—Ä–µ")
async def handle_text(message: Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        f"–û–Ω–ª–∞–π–Ω –∞—Ñ–∏—à–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥—Ä—É–≥–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ (–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞, –°–æ—á–∏ –∏ –¥—Ä.) –ø—É–±–ª–∏–∫—É—é—Ç –∞—Ñ–∏—à—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø–ª–∞—Ç–Ω–æ."
        f"\n\n–£—Å–ª–æ–≤–∏—è –ø–ª–∞—Ç–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã:"
        f"\n\n‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ 300—Ä."
        f"\n‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ + –∑–∞–∫—Ä–µ–ø 500—Ä."
        f"\n‚úÖ –ê—Ñ–∏—à–∞ –æ–¥–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Ç—Ä–∏ –¥–Ω—è."
        f"\n‚úÖ –ó–∞–∫—Ä–µ–ø –∞—Ñ–∏—à–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ 1 –¥–µ–Ω—å 500—Ä."
        f"\n‚úÖ –í—ã –º–æ–∂–µ—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞—Ñ–∏—à—É –±–µ–∑ —à–∞–±–ª–æ–Ω–∞ –∫–∞–Ω–∞–ª–∞."
        f"\n‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –∫ –≤–∞—à–µ–π –∞—Ñ–∏—à–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ."
        f"\n\n‚û°Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ–∫–ª–∞–º—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é üëâ<b>@adlerafisha_admin</b>üëà"
        f"\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–ø—É–±–ª–∏–∫—É–µ—Ç –≤–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –∫–∞–Ω–∞–ª.", reply_markup=keyboards.back_btn2,
        parse_mode='HTML')


@router.callback_query(lambda c: c.data.startswith("field_"))
async def process_field(callback: CallbackQuery, state: FSMContext):
    if callback.data == "field_name":
        data = await state.get_data()
        name = data['name']
        if name != None:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–ù–ê–ó–í–ê–ù–ò–ï*</b>"
                                             f"\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º.–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è."
                                             f"\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {name}", reply_markup=keyboards.back_btn,
                                             parse_mode='HTML')
        else:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–ù–ê–ó–í–ê–ù–ò–ï*</b>"
                                             f"\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º.–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è."
                                             f"\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.",
                                             reply_markup=keyboards.back_btn, parse_mode='HTML')
        await state.set_state(state=States.name)
    elif callback.data == "field_date":
        data = await state.get_data()
        date = data['date']
        if date != None:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–î–ê–¢–ê/–í–†–ï–ú–Ø*</b>"
                                             f"\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è."
                                             f"\n\n‚úÖ –ü—Ä–∏–º–µ—Ä: 8 –∏—é–Ω—è, —Å—É–±–±–æ—Ç–∞ /10:00-22:00"
                                             f"\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {date}", reply_markup=keyboards.back_btn, parse_mode='HTML')
        else:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–î–ê–¢–ê/–í–†–ï–ú–Ø*</b>"
                                             f"\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è."
                                             f"\n\n‚úÖ –ü—Ä–∏–º–µ—Ä: 8 –∏—é–Ω—è, —Å—É–±–±–æ—Ç–∞ /10:00-22:00",
                                             reply_markup=keyboards.back_btn, parse_mode='HTML')
        await state.set_state(state=States.date)
    elif callback.data == "field_description":
        data = await state.get_data()
        description = data['description']
        if description != None:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–û–ü–ò–°–ê–ù–ò–ï*</b>"
                                             f"\n\n–û–ø–∏—à–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º."
                                             f"\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ - 1200 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã)."
                                             f"\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {description}",
                                             reply_markup=keyboards.back_btn, parse_mode='HTML')
        else:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–û–ü–ò–°–ê–ù–ò–ï*</b>"
                                             f"\n\n–û–ø–∏—à–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º."
                                             f"\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ - 1200 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã).",
                                             reply_markup=keyboards.back_btn, parse_mode='HTML')
        await state.set_state(state=States.description)
    elif callback.data == "field_address":
        data = await state.get_data()
        adress = data['adress']
        if adress != None:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–ê–î–†–ï–°*</b>"
                                             f"\n\n–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è."
                                             f"\n\n‚úÖ –ü—Ä–∏–º–µ—Ä: –ê–¥–ª–µ—Ä, –ë–µ—Å—Ç—É–∂–µ–≤–∞ 1/1, Bestuzhev bar"
                                             f"\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {adress}", reply_markup=keyboards.back_btn, parse_mode='HTML')
        else:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–ê–î–†–ï–°*</b>"
                                             f"\n\n–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è."
                                             f"\n\n‚úÖ –ü—Ä–∏–º–µ—Ä: –ê–¥–ª–µ—Ä, –ë–µ—Å—Ç—É–∂–µ–≤–∞ 1/1, Bestuzhev bar",
                                             reply_markup=keyboards.back_btn, parse_mode='HTML')
        await state.set_state(state=States.address)
    elif callback.data == "field_price":
        data = await state.get_data()
        price = data['price']
        if price != None:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–¶–ï–ù–ê</b>"
                                             f"\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è."
                                             f"\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {price}", reply_markup=keyboards.back_btn,
                                             parse_mode='HTML')
        else:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–¶–ï–ù–ê</b>"
                                             f"\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è.",
                                             reply_markup=keyboards.back_btn, parse_mode='HTML')
        await state.set_state(state=States.price)
    elif callback.data == "field_contacts":
        data = await state.get_data()
        contacts = data['contacts']
        if contacts != None:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–ö–û–ù–¢–ê–ö–¢–´*</b>"
                                             f"\n\n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è."
                                             f"\n\n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é. <u>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∏—à–∏—Ç–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º</u>."
                                             f"\n\n‚úÖ –ü—Ä–∏–º–µ—Ä: @Myusername +79628877016, –ú–∞—Ä–∏—è"
                                             f"\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {contacts}", reply_markup=keyboards.back_btn,
                                             parse_mode='HTML')
        else:
            await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–ö–û–ù–¢–ê–ö–¢–´*</b>"
                                             f"\n\n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º –ø—É–Ω–∫—Ç–∞–º –æ–ø–∏—Å–∞–Ω–∏—è."
                                             f"\n\n–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–¥–∞—Ç—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é. <u>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–∏—à–∏—Ç–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º</u>."
                                             f"\n\n‚úÖ –ü—Ä–∏–º–µ—Ä: @Myusername +79628877016, –ú–∞—Ä–∏—è",
                                             reply_markup=keyboards.back_btn, parse_mode='HTML')
        await state.set_state(state=States.contacts)
    elif callback.data == "field_note":
        data = await state.get_data()
        note = data['note']
        if note != None:
            await callback.message.edit_text(f"‚ñ∂Ô∏è  –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–ü–†–ò–ú–ï–ß–ê–ù–ò–ï</b>"
                                             f"\n\n–ü–æ–ª–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∏–¥–∫–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø—Ä–∞–≤–∏–ª–∞—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞–∫ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é!"
                                             f"\n\n‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ - 100 –∑–Ω–∞–∫–æ–≤ –≤–º–µ—Å—Ç–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏."
                                             f"\n\n‚úÖ –ü—Ä–∏–º–µ—Ä:"
                                             f"\n–°–ê–ú–û–ï –ó–ù–ê–ß–ò–ú–û–ï –°–û–ë–´–¢–ò–ï –ì–û–î–ê. –†–ï–ì–ò–°–¢–†–ò–†–£–ô–¢–ï–°–¨ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°!!‚ú®"
                                             f"\n–î–ï–ô–°–¢–í–£–ï–¢ –ü–û–í–´–®–ï–ù–ò–ï –¶–ï–ù–´ –° 10 –ò–Æ–õ–Ø!ü§´ "
                                             f"\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è: {note}", reply_markup=keyboards.back_btn,
                                             parse_mode='HTML')
        else:
            await callback.message.edit_text(f"‚ñ∂Ô∏è  –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–ü–†–ò–ú–ï–ß–ê–ù–ò–ï</b>"
                                             f"\n\n–ü–æ–ª–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–∏–¥–∫–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –ø—Ä–∞–≤–∏–ª–∞—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∫–∞–∫ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é!"
                                             f"\n\n‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ - 100 –∑–Ω–∞–∫–æ–≤ –≤–º–µ—Å—Ç–µ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏."
                                             f"\n\n‚úÖ –ü—Ä–∏–º–µ—Ä:"
                                             f"\n–°–ê–ú–û–ï –ó–ù–ê–ß–ò–ú–û–ï –°–û–ë–´–¢–ò–ï –ì–û–î–ê. –†–ï–ì–ò–°–¢–†–ò–†–£–ô–¢–ï–°–¨ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°!!‚ú®"
                                             f"\n–î–ï–ô–°–¢–í–£–ï–¢ –ü–û–í–´–®–ï–ù–ò–ï –¶–ï–ù–´ –° 10 –ò–Æ–õ–Ø!ü§´ ",
                                             reply_markup=keyboards.back_btn,
                                             parse_mode='HTML')
        await state.set_state(state=States.note)
    elif callback.data == "field_photo":
        data = await state.get_data()
        photo = data['photo']
        """if photo != None:
            try:
                await bot.send_photo(chat_id=callback.from_user.id, photo=photo)
                await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–§–û–¢–û</b>"
                                                 f"\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∞—Ñ–∏—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É 1Ô∏è‚É£ —Ñ–æ—Ç–æ –∏–ª–∏ 1Ô∏è‚É£ –≤–∏–¥–µ–æ. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ  —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ 3 –º–±.",
                                                 reply_markup=keyboards.back_btn, parse_mode='HTML')

            except Exception:
                await bot.send_video(chat_id=callback.from_user.id, video=photo)
        else:"""
        await callback.message.edit_text(f"‚ñ∂Ô∏è –í—ã —Å–µ–π—á–∞—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –ø–æ–ª–µ <b>–§–û–¢–û</b>"
                                         f"\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∞—Ñ–∏—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É 1Ô∏è‚É£ —Ñ–æ—Ç–æ –∏–ª–∏ 1Ô∏è‚É£ –≤–∏–¥–µ–æ. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ  —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ 3 –º–±.",
                                         reply_markup=keyboards.back_btn, parse_mode='HTML')
        await state.set_state(state=States.photo)


@router.message(States.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    keyboard = keyboards.create_new_keyboard(data)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(state=States.process)


@router.message(States.date)
async def process_date(message: Message, state: FSMContext):
    await state.update_data(date=message.text)
    data = await state.get_data()
    keyboard = keyboards.create_new_keyboard(data)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(state=States.process)


@router.message(States.description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    keyboard = keyboards.create_new_keyboard(data)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(state=States.process)


@router.message(States.address)
async def process_address(message: Message, state: FSMContext):
    await state.update_data(adress=message.text)
    data = await state.get_data()
    keyboard = keyboards.create_new_keyboard(data)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(state=States.process)


@router.message(States.price)
async def process_price(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    data = await state.get_data()
    keyboard = keyboards.create_new_keyboard(data)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(state=States.process)


@router.message(States.contacts)
async def process_contacts(message: Message, state: FSMContext):
    await state.update_data(contacts=message.text)
    data = await state.get_data()
    keyboard = keyboards.create_new_keyboard(data)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(state=States.process)


@router.message(States.note)
async def process_note(message: Message, state: FSMContext):
    await state.update_data(note=message.text)
    data = await state.get_data()
    keyboard = keyboards.create_new_keyboard(data)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(state=States.process)


@router.message(States.photo)
async def process_photo(message: Message, state: FSMContext):
    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–∞–º–æ–≥–æ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ñ–æ—Ç–æ
        photo_id = message.photo[-1].file_id
        await state.update_data(photo=photo_id)
    elif message.video:
        video_id = message.video.file_id
        await state.update_data(photo=video_id)

    data = await state.get_data()
    keyboard = keyboards.create_new_keyboard(data)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - 1)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(state=States.process)


@router.callback_query(lambda q: q.data == "back")
async def back(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    keyboard = keyboards.create_new_keyboard(data)
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(state=States.process)


@router.callback_query(lambda q: q.data == "view")
async def back(callback: CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    data = await state.get_data()
    text = ''
    username = callback.from_user.username
    if data['name'] is not None:
        text += f"üìé{data['name']}\n"
    if data['date'] is not None:
        text += f"üìÜ{data['date']}\n"
    try:
        found_city = None
        for city in configs.CITY:
            if city in data['adress']:
                found_city = city
                break
        if found_city is not None:
            text += f"#{found_city.replace(' ', '_')}\n"
    except:
        pass
    if data['description'] is not None:
        text += f"‚ñ∂Ô∏è{data['description']}\n"
    if data['adress'] is not None:
        text += f"üìç{data['adress']}\n"
    if data['price'] is not None:
        text += f"üí∏{data['price']}\n"
    if data['contacts'] is not None:
        text += f"üë§{data['contacts']}\n"
    if data['note'] is not None:
        text += f"‚ÜóÔ∏è{data['note']}\n"
    if data['photo'] is not None:
        text += f"\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{username}"

        try:
            await bot.send_photo(chat_id=callback.from_user.id, photo=data['photo'], caption=text,
                                 reply_markup=keyboards.back_btn1)
        except Exception:
            await bot.send_video(chat_id=callback.from_user.id, video=data['photo'], caption=text,
                                 reply_markup=keyboards.back_btn1)
    else:
        text += f"\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{username}"
        await callback.message.answer(text, reply_markup=keyboards.back_btn1)


@router.callback_query(lambda q: q.data == "send")
async def back(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data['message_id'] is not None:
        username = callback.from_user.username
        text = ''
        if data['name'] is not None:
            text += f"üìé{data['name']}\n"
        if data['date'] is not None:
            text += f"üìÜ{data['date']}\n"
        try:
            found_city = None
            for city in configs.CITY:
                if city in data['adress']:
                    found_city = city
                    break
            if found_city is not None:
                text += f"#{found_city.replace(' ', '_')}\n"
        except:
            pass
        if data['description'] is not None:
            text += f"‚ñ∂Ô∏è{data['description']}\n"
        if data['adress'] is not None:
            text += f"üìç{data['adress']}\n"
        if data['price'] is not None:
            text += f"üí∏{data['price']}\n"
        if data['contacts'] is not None:
            text += f"üë§{data['contacts']}\n"
        if data['note'] is not None:
            text += f"‚ÜóÔ∏è{data['note']}\n"
        if data['photo'] is not None:
            text += f"\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{username}"
            try:
                mes_id = data['message_id']
                await bot.edit_message_media(chat_id=-1002493912329, message_id=mes_id,
                                             media=InputMediaVideo(media=data['photo']))
                mes = await bot.edit_message_caption(chat_id=-1002493912329, message_id=mes_id, caption=text)
                await state.update_data(message_id=mes.message_id)
            except Exception:
                mes_id = data['message_id']
                await bot.edit_message_media(chat_id=-1002493912329, message_id=mes_id,
                                             media=InputMediaPhoto(media=data['photo']))
                mes = await bot.edit_message_caption(chat_id=-1002493912329, message_id=mes_id, caption=text)
                await state.update_data(message_id=mes.message_id)

        else:
            text += f"\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{username}"
            mes_id = data['message_id']
            mes = await bot.edit_message_text(chat_id=-1002493912329, message_id=int(mes_id), text=text)
            await state.update_data(message_id=mes.message_id)
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        await callback.message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É", reply_markup=keyboards.back_btn1)
    else:
        global timer_active, remaining_time

        if timer_active:
            hours = remaining_time
            await callback.message.answer(
                f"–¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining_time // 3600} —á–∞—Å–æ–≤ {remaining_time % 3600 // 60} –º–∏–Ω—É—Ç {remaining_time % 60} —Å–µ–∫—É–Ω–¥.")
            return
        username = callback.from_user.username
        text = ''
        if data['name'] is not None:
            text += f"üìé{data['name']}\n"
        if data['date'] is not None:
            text += f"üìÜ{data['date']}\n"
        found_city = None
        for city in configs.CITY:
            if city in data['adress']:
                found_city = city
                break
        if found_city is not None:
            text += f"#{found_city}\n"
        if data['description'] is not None:
            text += f"‚ñ∂Ô∏è{data['description']}\n"
        if data['adress'] is not None:
            text += f"üìç{data['adress']}\n"
        if data['price'] is not None:
            text += f"üí∏{data['price']}\n"
        if data['contacts'] is not None:
            text += f"üë§{data['contacts']}\n"
        if data['note'] is not None:
            text += f"‚ÜóÔ∏è{data['note']}\n"
        if data['photo'] is not None:
            text += f"\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{username}"

            try:
                mes = await bot.send_photo(chat_id=-1002493912329, photo=data['photo'], caption=text)
                await state.update_data(message_id=mes.message_id)
            except Exception:
                mes = await bot.send_video(chat_id=-1002493912329, video=data['photo'], caption=text)
                await state.update_data(message_id=mes.message_id)

        else:
            text += f"\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–ª: @{username}"
            mes = await bot.send_message(-1002493912329, text=text)
            await state.update_data(message_id=mes.message_id)
            await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
            await callback.message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É", reply_markup=keyboards.back_btn1)

        timer_active = True
        # await callback.message.answer("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ 3 —Å—É—Ç–æ–∫. –í —ç—Ç–æ –≤—Ä–µ–º—è –Ω–µ–ª—å–∑—è –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–æ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

        while remaining_time > 0:
            await asyncio.sleep(1)
            remaining_time -= 1

        timer_active = False
        remaining_time = 86400  # –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ 3 –º–∏–Ω—É—Ç—ã
        await callback.message.answer("–ü—Ä–æ—à–ª–æ 3 —Å—É—Ç–æ–∫, –≤–∞–º —Å–Ω–æ–≤–∞ –º–æ–∂–Ω–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞—Ñ–∏—à—É!")


@router.callback_query(lambda q: q.data == "cancel")
async def cancel(callback: CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await callback.message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?",
                                  reply_markup=keyboards.yes_no_btn)

    @router.callback_query(lambda q: q.data == "clear")
    async def yes(callback: CallbackQuery, state: FSMContext):
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        await state.clear()
        await callback.message.answer(f"–í—ã–±—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=keyboards.create_reply_keyboard())

    @router.callback_query(lambda q: q.data == "gotored")
    async def yes(callback: CallbackQuery, state: FSMContext):
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        data = await state.get_data()
        keyboard = keyboards.create_new_keyboard(data)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)


@router.callback_query(lambda q: q.data == "back_to_menu")
async def cancel(callback: CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await callback.message.answer(
        f"–ü—Ä–∏–≤–µ—Ç üëã"
        f"\n\n–Ø —á–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞ <b>–ê–§–ò–®–ê‚Ä¢–ê–î–õ–ï–†üí¨</b>.\n–ê —Ç–∞–∫ –∂–µ —è –ø–æ–º–æ–≥–∞—é —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–≤–æ—é –∞—Ñ–∏—à—É –≤ –∫–∞–Ω–∞–ª–µ."
        f"\n\n–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?üëá",
        reply_markup=keyboards.create_reply_keyboard(), parse_mode='HTML')
